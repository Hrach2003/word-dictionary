{"version":3,"sources":["serviceWorker.ts","store/types/index.ts","store/reducers/user.reduser.ts","store/reducers/app.reducer.ts","store/actions/app.actions.ts","store/main.tsx","pages/Index.tsx","hooks/useInputBind.ts","routes/app.routes.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","APP","USER","userInitialState","authorized","user","userReducer","state","action","type","SIGN_IN","payload","SIGN_OUT","appInitialState","posts","appReducer","CREATE_POST","post","DELETE_POST","filter","id","useAppReducer","dispatch","useReducer","appState","appDispatch","createPost","deletePost","postId","GlobalContext","createContext","StoreProvider","children","userState","userDispatch","useUserReducer","Provider","value","Index","useHistory","postInput","useState","setValue","bind","onChange","e","target","clear","useInputBind","useContext","authGoogle","a","fetch","res","json","data","console","log","href","className","onCopy","onClick","title","Date","now","toString","map","key","Routes","path","to","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICJMC,EAQAC,E,+BARAD,K,8BAAAA,E,+BAAAA,M,cAQAC,K,kBAAAA,E,qBAAAA,M,KClBZ,IAAMC,EAA+B,CACnCC,YAAY,EACZC,KAAM,MAGFC,EAAc,SAACC,EAAmBC,GACtC,OAAQA,EAAOC,MACb,KAAKP,EAAKQ,QACR,OAAO,eACFH,EADL,CAEEH,YAAY,EACZC,KAAMG,EAAOG,QAAQN,OAEzB,KAAKH,EAAKU,SACR,OAAO,eACFL,EADL,CAEEF,KAAM,KACND,YAAY,IAEhB,QAAS,OAAOG,I,YCnBdM,EAA6B,CACjCC,MAAO,IAEHC,EAAa,SAACR,EAAkBC,GACpC,OAAQA,EAAOC,MACb,KAAKR,EAAIe,YACP,OAAO,eACFT,EADL,CAEEO,MAAM,GAAD,mBAAMP,EAAMO,OAAZ,CAAmBN,EAAOG,QAAQM,SAE3C,KAAKhB,EAAIiB,YACP,OAAO,eACFX,EADL,CAEEO,MAAOP,EAAMO,MAAMK,QAAO,SAAAF,GAAI,OAAIA,EAAKG,KAAOZ,EAAOG,QAAQS,QAEjE,QACE,OAAOb,IAIE,SAASc,IAAiB,ICtBXC,EDsBU,EACNC,qBAAWR,EAAYF,GADjB,mBAC/BW,EAD+B,KACrBC,EADqB,QCtBVH,EDwBqBG,ECV1C,CACLC,WAdiB,SAACT,GAClBK,EAAS,CACPb,KAAMR,EAAIe,YACVL,QAAS,CAAEM,WAWDU,WAPK,SAACC,GAClBN,EAAS,CACPb,KAAMR,EAAIiB,YACVP,QAAS,CAAES,GAAIQ,QDenB,MAAO,CAAEJ,WAAUC,cAAaE,WAJM,EAE9BA,WAEoCD,WAJN,EAElBA,YErBtB,IAAMG,EAAgBC,wBAA+B,IAIxCC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACGX,IAAlDG,EAD+C,EAC/CA,SAAUC,EADqC,EACrCA,YAAaC,EADwB,EACxBA,WAAYC,EADY,EACZA,WADY,EHkB1C,WAA2B,IAAD,EACLJ,qBAAWjB,EAAaH,GADnB,mBAEvC,MAAO,CAAE8B,UAF8B,KAEnBC,aAFmB,MGhBHC,GAA5BF,EAF+C,EAE/CA,UAAWC,EAFoC,EAEpCA,aAEnB,OACE,kBAACL,EAAcO,SAAf,CAAwBC,MAAO,CAC7Bb,WAAUC,cAAaQ,YAAWC,eAAcR,aAAYC,eAE3DK,I,gCCXMM,EAAQ,WACHC,cAAhB,IAEMC,ECPoB,WAAO,IAAD,EACNC,mBAAS,IADH,mBACzBJ,EADyB,KAClBK,EADkB,KAMhC,MAAO,CACLC,KAAM,CAAEN,QAAOO,SALA,SAACC,GAChBH,EAASG,EAAEC,OAAOT,SAKlBU,MAHY,kBAAML,EAAS,KAI3BL,SDFgBW,GAHO,EDCGC,qBAAWpB,GCG/BL,EAJiB,EAIjBA,SAAUE,EAJO,EAIPA,WAAYC,EAJL,EAIKA,WAQxBuB,EAAU,uCAAG,8BAAAC,EAAA,+EAEGC,MAAM,SAFT,cAETC,EAFS,gBAGIA,EAAIC,OAHR,YAGTC,EAHS,kDAKNC,QAAQC,IAAIF,IALN,QAOb1D,OAAOC,SAAS4D,KAAO,eAPV,0DAUfF,QAAQC,IAAR,MAVe,0DAAH,qDAahB,OACE,yBAAKE,UAAU,OACb,yCAAOA,UAAU,QAAQC,OAAQ,SAACf,GAAD,OAAOW,QAAQC,IAAIZ,KAAQL,EAAUG,OACtE,4BAAQgB,UAAU,WAAWE,QAvBZ,WAChBrB,EAAUH,QACXX,EAAW,CAAEoC,MAAOtB,EAAUH,MAAOjB,GAAI2C,KAAKC,MAAMC,aACpDzB,EAAUO,WAoBV,YACCvB,EAASV,MAAMoD,KAAI,SAAAjD,GAClB,OAAO,yBAAKkD,IAAKlD,EAAKG,GAAIuC,UAAU,4EAClC,uBAAGA,UAAU,kDAAkD1C,EAAK6C,OAD/D,IAC0E,4BAAQH,UAAU,cAAcE,QAAS,kBAAMlC,EAAWV,EAAKG,MAA/D,gBAGnF,uBAAGuC,UAAU,MAAME,QAASX,GAA5B,iBEpCOkB,EAAS,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUC,GAAG,QCCJC,MAPf,WACE,OAAO,yBAAKZ,UAAU,oCACpB,wBAAIA,UAAU,oCAAd,UACA,kBAAC,EAAD,Q,MCGJa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SVyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.08c741c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface IPost { \n  title: string, \n  id: string \n} \n\nexport interface IUser { \n  name: string, \n  emmail?: string,\n  id: string \n} \n\nexport type APP_STATE = {\n  posts: IPost[]\n}\nexport enum APP {\n  CREATE_POST = \"APP_CREATE_POST\", \n  DELETE_POST = \"APP_DELETE_POST\",\n}\nexport type APP_ACTIONS = \n  { type: APP.CREATE_POST, payload: { post: IPost }}  | \n  { type: APP.DELETE_POST, payload: { id: string } }  \n\nexport enum USER {\n  SIGN_IN = \"SIGN_IN\",\n  SIGN_OUT = \"SIGN_OUT\"\n}\nexport type USER_STATE = {\n  authorized: boolean,\n  user: IUser | null\n}\n\nexport type USER_ACTIONS = \n  { type: USER.SIGN_IN, payload: { user: IUser }}  | \n  { type: USER.SIGN_OUT }  \n\nexport interface IStore {\n  appState: APP_STATE\n  appDispatch: React.Dispatch<APP_ACTIONS>\n  createPost: (post: IPost) => void\n  deletePost: (postId: string) => void\n  userState: USER_STATE\n  userDispatch: React.Dispatch<USER_ACTIONS>\n}\n","import { USER_ACTIONS, USER_STATE, USER } from '../types';\nimport { useReducer } from 'react';\n\n\nconst userInitialState: USER_STATE = {\n  authorized: false,\n  user: null\n}\n\nconst userReducer = (state: USER_STATE, action: USER_ACTIONS): USER_STATE => {\n  switch (action.type) {\n    case USER.SIGN_IN:\n      return {\n        ...state,\n        authorized: true,\n        user: action.payload.user\n      }\n    case USER.SIGN_OUT:\n      return {\n        ...state,\n        user: null,\n        authorized: false\n      }  \n    default: return state\n  }\n}\n\nexport default function useUserReducer() {\n  const [userState, userDispatch] = useReducer(userReducer, userInitialState)\n  return { userState, userDispatch }\n}","import { useReducer } from 'react';\nimport { APP_STATE, APP_ACTIONS, APP } from '../types';\nimport { useAppActions } from '../actions/app.actions';\n\nconst appInitialState: APP_STATE = {\n  posts: []\n}\nconst appReducer = (state: APP_STATE, action: APP_ACTIONS): APP_STATE => {\n  switch (action.type) {\n    case APP.CREATE_POST: \n      return {\n        ...state,\n        posts: [...state.posts, action.payload.post]\n      }\n    case APP.DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.payload.id)\n      }          \n    default:\n      return state\n  }\n}\n\nexport default function useAppReducer() {\n  const [appState, appDispatch] = useReducer(appReducer, appInitialState)\n  const { deletePost, createPost } = useAppActions(appDispatch)\n\n  return { appState, appDispatch, deletePost, createPost }\n} ","import { APP_ACTIONS, IPost, APP } from './../types/index';\n\nexport const useAppActions = (dispatch: React.Dispatch<APP_ACTIONS>) => {\n  const createPost = (post: IPost) => {\n    dispatch({\n      type: APP.CREATE_POST,\n      payload: { post }\n    })\n  }\n\n  const deletePost = (postId: string) => {\n    dispatch({\n      type: APP.DELETE_POST,\n      payload: { id: postId }\n    })\n  }\n  return {\n    createPost, deletePost\n  }\n}","import React, { createContext, useContext } from 'react'\nimport useUserReducer from './reducers/user.reduser'\nimport useAppReducer from './reducers/app.reducer'\nimport { IStore } from './types'\n\nconst GlobalContext = createContext<Partial<IStore>>({})\n\nexport const useStore = () => useContext(GlobalContext) as IStore\n\nexport const StoreProvider: React.FC = ({ children }) => {\n  const { appState, appDispatch, createPost, deletePost } = useAppReducer()\n  const { userState, userDispatch } = useUserReducer()\n\n  return (\n    <GlobalContext.Provider value={{\n      appState, appDispatch, userState, userDispatch, createPost, deletePost\n    }}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}","import React from 'react'\nimport { useStore } from '../store/main'\nimport { useInputBind } from '../hooks/useInputBind'\nimport { useHistory } from 'react-router-dom'\n\n\nexport const Index = () => {\n  const history = useHistory()\n\n  const postInput = useInputBind()\n  const { appState, createPost, deletePost } = useStore()\n  const clickHandler = () => {\n    if(postInput.value) {\n      createPost({ title: postInput.value, id: Date.now().toString() })\n      postInput.clear()\n    }\n  }\n\n  const authGoogle = async () => {\n    try {\n      const res = await fetch('/user')\n      const data = await res.json()\n      if( data) {\n        return console.log(data)\n      }else {\n        window.location.href = '/auth/google'\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  return (\n    <div className=\"p-4\">\n      <input className=\"input\" onCopy={(e) => console.log(e)} {...postInput.bind} />\n      <button className=\"btn ml-3\" onClick={clickHandler}>Add Post</button>\n      {appState.posts.map(post => {\n        return <div key={post.id} className=\"bg-gray-400 rounded p-3 my-2 flex justify-between items-center shadow-md\">\n          <p className=\"text-gray-800 capitalize text-lg truncate pr-4\">{post.title}</p> <button className=\"btn btn-red\" onClick={() => deletePost(post.id)} > delete </button>\n        </div>\n      })}\n      <a className=\"btn\" onClick={authGoogle}>Auth Google</a>\n    </div>\n  )\n}\n","import { useState, ChangeEvent } from \"react\"\n\nexport const useInputBind = () => {\n  const [value, setValue] = useState('')\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value)\n  }\n  const clear = () => setValue('')\n  return {\n    bind: { value, onChange },\n    clear,\n    value\n  }\n}\n","import React from 'react'\nimport { Route, Switch, Redirect  } from 'react-router-dom'\n\nimport { Index } from '../pages/Index'\nexport const Routes = () => {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <Index /> \n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}\n","import React from 'react';\nimport { Routes } from './routes/app.routes'\n\n\nfunction App() {\n  return <div className=\"text-center bg-gray-300 h-screen\">\n    <h1 className=\"text-3xl font-semibold uppercase\">My app</h1>\n    <Routes />\n  </div>\n}\n\nexport default App; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { StoreProvider } from './store/main';\n\nimport App from './App';\nimport \"./css/main.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <Router>\n        <App />\n      </Router>\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}